// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Test from "./Test.mjs";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as RescriptCore from "../src/RescriptCore.mjs";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

function panicTest(param) {
  var caught;
  try {
    caught = RescriptCore.panic("uh oh");
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === Js_exn.$$Error) {
      caught = err._1.message;
    } else {
      throw err;
    }
  }
  Test.run([
        [
          "ErrorTests.res",
          8,
          22,
          43
        ],
        "Should resolve test"
      ], caught, (function (prim0, prim1) {
          return prim0 === prim1;
        }), "Panic! uh oh");
}

panicTest(undefined);

function raiseAnyCanThrowAgain(param) {
  var received = false;
  var err = new Error("something went wrong");
  try {
    throw err;
  }
  catch (exn){
    console.log("An exception happened!");
    try {
      throw exn;
    }
    catch (raw_exn){
      var exn$1 = Caml_js_exceptions.internalToOCamlException(raw_exn);
      var e = Caml_js_exceptions.as_js_exn(exn$1);
      if (e !== undefined) {
        received = Caml_option.valFromOption(e) === err;
      }
      
    }
  }
  Test.run([
        [
          "ErrorTests.res",
          33,
          22,
          39
        ],
        "Can throw again"
      ], received, (function (prim0, prim1) {
          return prim0 === prim1;
        }), true);
}

raiseAnyCanThrowAgain(undefined);

export {
  panicTest ,
  raiseAnyCanThrowAgain ,
}
/*  Not a pure module */
