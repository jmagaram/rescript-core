// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_option from "rescript/lib/es6/caml_option.js";

var isNull = (function(a) { return (a===null); });

var isNullOrUndefined = (function(a) { return (a===null || a===undefined); });

var isUndefined = (function(a) { return (a===undefined); });

function classify(value) {
  var match = typeof value;
  if (match === "symbol") {
    return {
            TAG: /* Symbol */5,
            _0: value
          };
  } else if (match === "boolean") {
    return {
            TAG: /* Bool */1,
            _0: value
          };
  } else if (match === "string") {
    return {
            TAG: /* String */4,
            _0: value
          };
  } else if (match === "function") {
    return {
            TAG: /* Function */6,
            _0: value
          };
  } else if (match === "object") {
    if (isNull(value)) {
      return /* Null */1;
    } else {
      return {
              TAG: /* Object */0,
              _0: value
            };
    }
  } else if (match === "undefined") {
    return /* Undefined */0;
  } else if (match === "number") {
    return {
            TAG: /* Number */2,
            _0: value
          };
  } else {
    return {
            TAG: /* BigInt */3,
            _0: value
          };
  }
}

function toObject(i) {
  var i$1 = classify(i);
  if (typeof i$1 === "number" || i$1.TAG !== /* Object */0) {
    return ;
  } else {
    return Caml_option.some(i$1._0);
  }
}

function toBool(i) {
  var b = classify(i);
  if (typeof b === "number" || b.TAG !== /* Bool */1) {
    return ;
  } else {
    return b._0;
  }
}

function toFloat(i) {
  var i$1 = classify(i);
  if (typeof i$1 === "number" || i$1.TAG !== /* Number */2) {
    return ;
  } else {
    return i$1._0;
  }
}

function toBigInt(i) {
  var i$1 = classify(i);
  if (typeof i$1 === "number" || i$1.TAG !== /* BigInt */3) {
    return ;
  } else {
    return Caml_option.some(i$1._0);
  }
}

function toString(i) {
  var i$1 = classify(i);
  if (typeof i$1 === "number" || i$1.TAG !== /* String */4) {
    return ;
  } else {
    return i$1._0;
  }
}

function toSymbol(i) {
  var i$1 = classify(i);
  if (typeof i$1 === "number" || i$1.TAG !== /* Symbol */5) {
    return ;
  } else {
    return Caml_option.some(i$1._0);
  }
}

function toFunction(i) {
  var i$1 = classify(i);
  if (typeof i$1 === "number" || i$1.TAG !== /* Function */6) {
    return ;
  } else {
    return Caml_option.some(i$1._0);
  }
}

function get(item, name) {
  if (isNullOrUndefined(item)) {
    return ;
  } else {
    return item[name];
  }
}

function getBySymbol(item, sym) {
  if (isNullOrUndefined(item)) {
    return ;
  } else {
    return item[sym];
  }
}

export {
  classify ,
  isUndefined ,
  isNull ,
  isNullOrUndefined ,
  toObject ,
  toBool ,
  toFloat ,
  toBigInt ,
  toString ,
  toSymbol ,
  toFunction ,
  get ,
  getBySymbol ,
}
/* No side effect */
